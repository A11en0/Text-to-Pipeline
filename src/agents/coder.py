"""
Coder Agent: Focused on handling natural language instructions, code optimization, and error correction
"""
from src.agents.base import Agent
import pandas as pd
from typing import List, Dict, Any, Union
from src.utils.logger import get_logger

class CoderAgent(Agent):
    """
    Agent for handling natural language instructions, optimizing code, and fixing errors.
    
    Main Functions:
    1. Generate code from natural language instructions
    2. Optimize base code generated by SamplerAgent
    3. Fix code errors based on execution feedback
    """
    
    def __init__(self, config, llm_client, code_format="pandas"):
        """
        Initialize the CoderAgent
        
        Args:
            config: Agent configuration
            llm_client: LLM client
            code_format: Output code format, supports "pandas", "sql", etc.
        """
        super().__init__(config)
        self.llm_client = llm_client
        self.code_format = code_format
        self.logger = get_logger("coder")
        
        # Set maximum number of attempts
        self.max_attempts = config.get("max_attempts", 3)
        
        # Configure prompt templates
        self.instruction_prompt_template = config.get("instruction_prompt_template", self.DEFAULT_INSTRUCTION_PROMPT)
        self.optimization_prompt_template = config.get("optimization_prompt_template", self.DEFAULT_OPTIMIZATION_PROMPT)
        self.fix_prompt_template = config.get("fix_prompt_template", self.DEFAULT_FIX_PROMPT)
        
        self.logger.info(f"CoderAgent initialized, code format: {code_format}")
    
    # Default prompt templates
    DEFAULT_INSTRUCTION_PROMPT = """
    You are a data processing expert. Please generate pandas code based on the following instruction.
    
    Input Table:
    {input_table}
    
    Task Instruction:
    {instruction}
    
    Please define a function named `transform` that takes a pandas DataFrame `df` as input and returns the processed result.
    Output code only, no explanations.
    """
    
    DEFAULT_OPTIMIZATION_PROMPT = """
    You are a Python code optimization expert. Please optimize the following pandas code to make it more efficient, readable, and professional.
    
    Original Code:
    {code}
    
    Guidelines:
    1. Use more efficient pandas operations
    2. Add appropriate comments
    3. Ensure code readability
    4. Add error handling if possible
    
    Output only the optimized code, no explanations.
    """
    
    DEFAULT_FIX_PROMPT = """
    Please fix the errors in the following pandas code.
    
    Code:
    {code}
    
    Error Message:
    {error}
    
    Output only the corrected code, no explanations.
    """
    
    def run(self, **kwargs):
        """
        Execute the appropriate operation based on input parameters
        
        Args:
            transform_chain (optional): Transformation chain
            pandas_ops (optional): List of pandas operations from SamplerAgent
            code (optional): Code to be optimized or fixed
            instruction (optional): Natural language instruction
            input_table (optional): Input table
            feedback (optional): Execution feedback including error messages
            
        Returns:
            str: Generated or optimized code
        """
        # Reset attempt count
        self.attempt_count = 0

        optimization_enabled = self.config.get("workflow", {}).get("optimization_enabled", False)

        # If execution feedback is provided, fix the code
        if "feedback" in kwargs:
            return self._fix_code(kwargs["feedback"])
        
        # If a natural language instruction is provided, generate code
        elif "instruction" in kwargs and kwargs.get("instruction"):
            return self._generate_from_instruction(
                kwargs.get("instruction"),
                kwargs.get("input_table")
            )
        
        # If pandas operations are provided, optimize the composed code
        elif "pandas_ops" in kwargs and kwargs.get("pandas_ops"):
            return self._optimize_code(self._combine_pandas_ops(kwargs["pandas_ops"]))
        
        # If existing code is provided and optimization is enabled, optimize it
        elif "code" in kwargs and kwargs.get("code") and optimization_enabled:
            return self._optimize_code(kwargs["code"])
        
        elif "code" in kwargs and kwargs.get("code"):
            return kwargs["code"]
        
        # If none of the above conditions are met, return default code
        self.logger.warning("Insufficient parameters provided to generate code")
        return "def transform(df):\n    return df.copy()"
    
    def _combine_pandas_ops(self, pandas_ops):
        """
        Combine pandas operations from SamplerAgent into a complete function
        
        Args:
            pandas_ops: List of pandas operations
            
        Returns:
            str: Combined code
        """
        code_lines = ["def transform(df):", "    result = df.copy()"]
        
        for i, op in enumerate(pandas_ops):
            code_lines.append(f"    # Step {i+1}")
            code_lines.append(f"    {op}")
        
        code_lines.append("    return result")
        return "\n".join(code_lines)
    
    def _generate_from_instruction(self, instruction, input_table=None):
        """
        Generate code from a natural language instruction
        
        Args:
            instruction: Natural language instruction
            input_table: Input table
            
        Returns:
            str: Generated code
        """
        self.logger.info("Generating code from natural language instruction")
        
        # Prepare table information
        table_info = ""
        if input_table is not None:
            table_info = f"Table columns: {list(input_table.columns)}\n"
            table_info += f"Top rows:\n{input_table.head(3).to_string()}"
        
        # Construct prompt
        prompt = self.instruction_prompt_template.format(
            instruction=instruction,
            input_table=table_info
        )
        
        # Generate code using LLM
        self.attempt_count += 1
        response = self.llm_client.generate(prompt)
        
        # Extract code
        code = self._extract_code(response)
        return code
    
    def _optimize_code(self, code):
        """
        Optimize code
        
        Args:
            code: Code to be optimized, usually in full function format
            
        Returns:
            str: Optimized code
        """
        self.logger.info("Optimizing code")
        
        # Construct prompt
        prompt = self.optimization_prompt_template.format(code=code)
        
        # Optimize code using LLM
        self.attempt_count += 1
        response = self.llm_client.generate(prompt)
        
        # Extract optimized code
        optimized_code = self._extract_code(response)
        return optimized_code
    
    def _fix_code(self, feedback):
        """
        Fix code based on execution feedback
        
        Args:
            feedback: Execution feedback containing code and error information
            
        Returns:
            str: Fixed code
        """
        self.logger.info(f"Fixing code, error: {feedback.get('error', 'Unknown error')}")
        
        code = feedback.get("code", "")
        error = feedback.get("error", "Unknown error")
        
        # Construct prompt
        prompt = self.fix_prompt_template.format(
            code=code,
            error=error
        )
        
        # Fix code using LLM
        self.attempt_count += 1
        response = self.llm_client.generate(prompt)
        
        # Extract fixed code
        fixed_code = self._extract_code(response)
        return fixed_code
    
    def _extract_code(self, response):
        """
        Extract code from LLM response
        
        Args:
            response: LLM response
            
        Returns:
            str: Extracted code
        """
        # Extract code from code block if present
        if "```python" in response and "```" in response:
            start = response.find("```python") + len("```python")
            end = response.find("```", start)
            code = response[start:end].strip()
            return code
        elif "```" in response:
            start = response.find("```") + len("```")
            end = response.find("```", start)
            code = response[start:end].strip()
            return code
        else:
            # Otherwise, return the entire response
            return response.strip()
